// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
//
import { Filter } from "../../portal/shared/models/filter.model";
import { Asset } from '../../shared/models/asset.interface';

/**
 * Main Interface for
 * Transaction Object (shared)
 *  **/
export interface ITransaction {
    // optional params for view
    time_stamp?: number;

    // outgoing/incoming payment direction
    payment_type?: string;

    account_name?: string;

    // stores counterparty for display
    // will be OFI or RFI
    counterparty?: string;

    // boolean to indicate whether transaction
    // is displayed from RFI POV
    reversed?: boolean;
}

/**
 * Main Interface for
 * Transfer/Fitoficct Object
 *  **/

export interface ITransfer extends ITransaction {

    // Non-PII data necessary for WW & client business purposes
    fitoficctnonpiidata: IFitoficctNonPiiData;

    ofi_id?: string;

    // timestamp of initiation
    timestamp: number;

    // type of transfer this is. 'credit transfer' or 'cancellation'
    message_type: TransactionMessageType;

    // array of statuses of the transaction
    transaction_status: TransactionStatus[];

    // stores only the latest status
    // pulls from end of transaction_status string
    current_status?: string;

    // block id on the Stellar/blockchain ledger that this transaction was written to
    transactionid?: string[];

    payIn?: string;
    payOut?: string;
}

/**
 *  Main Interface for Exchange Object
 */
export interface IExchange extends ITransaction {
    ExchangeReceipt: IExchangeReceipt;

    // Participant ID of OFI
    OFIID: string;

    // Participant ID of RFI
    RFIID: string;

    asset_sent?: Asset;
    asset_received?: Asset;

    amount_sent?: number;
    amount_received?: number;
}


// Interfaces for subobjects within Transaction interfaces

export interface IFitoficctNonPiiData {
    account_name_send: string;

    // TODO: currently does not exist. dependent on https://github.com/GFTN/gftn-services/issues/1071
    account_name_receive?: string;
    // Generated by the participant,
    // should follow a convention set by World Wire
    end_to_end_id: string;
    exchange_rate: number;
    // ID of each message being sent on World Wire
    instruction_id: string;

    // original ID of the pac008 message sent for payments
    original_instruction_id: string;

    // Original E2E ID (different for returned payment)
    original_message_id: string;
    creditor_payment_address: string;
    transactiondetails: ITransactionDetails;
}

export interface ITransactionDetails {
    amount_beneficiary: number;
    amount_settlement: number;
    asset_code_beneficiary: string;
    assetsettlement: Asset;
    feecreditor: Fee;
    ofi_id: string;
    rfi_id: string;
    settlement_method: string;
}

export interface Fee {
    cost: number;
    costasset: Asset;
}

export interface TransactionStatus {
    transactionstatus: string;
    timestamp: string;
}

/**
 *  Main Interfaces for Exchange Object
 */

export interface IExchangeReceipt {

    exchange: IExchangeDetail;

    // Final Status of the Exchange transaction
    status_exchange: string;

    // Unix timestamp of the time of execution
    // for the exchange transaction
    time_executed: number;

    transacted_amount_source: number;

    transacted_amount_target: number;

    transaction_hash: string;
}

export interface IExchangeDetail {
    account_name_receive: string;

    account_name_send: string;

    amount: number;

    quote: IQuote;
}

export interface IQuote {
    account_name_receive: string;

    account_name_send: string;

    exchange_rate: string;

    limit_max: string;

    // Generated by the participant,
    // should follow a convention set by World Wire
    quote_id: string;

    quote_request: IQuoteRequest;

    rfi_id: string;

    // Ending/Expiry unix timestamp of the quote
    time_expire: number;

    // Starting unix timestamp of when the quote is valid
    time_start: number;
}

export interface IQuoteRequest {
    limit_max: number;

    limit_min: number;

    ofi_id: string;

    source_asset: Asset;

    target_asset: Asset;

    time_expire: number;
}

export type TransactionMessageType = 'credit_transfer' | 'cancellation';

export type TransactionType = 'transfer' | 'exchange';

/**
 * Model used by service to store table data information,
 * filter information, etc. for each transaction type
 *
 * @export
 * @interface TransactionTypeDetail
 */
export interface TransactionTypeDetail {
    key: TransactionType;
    name: string;
    headers: any[];
    transactionStatuses: any[];
    search_terms: string[];
    searchPlaceholderText: string;
    filters: { [key: string]: Filter[] };
}

/**
 * Keys for transaction field lookup
 *
 * @export
 * @interface TransactionKeyBook
 */
export interface TransactionKeyBook {
    // unique identifier of this transaction
    id: string;

    // optional field to track a reference
    // to the original id of another transaction
    originalId?: string;

    // current transaction status (final state so far in time)
    transactionStatus: string;

    // name of account in participant's view (OFI vs RFI)
    accountName: string;

    // incoming vs. outgoing payment. only applicable to one-way transactions
    paymentType?: string;

    sentAmount: string;
    sentAssetCode: string;
    receivedAmount: string;
    receivedAssetCode: string;
    settlementAmount: string;
    settlementAssetCode: string;

    // time initiated for the transaction
    timeStamp: string;

    // field that tracks the stellar transaction hash
    stellarId: string;
    counterparty: string;
}

export class TransactionStatusMapping {
    name: string;
    detail: string;
}
