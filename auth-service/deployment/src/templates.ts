// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
import * as _ from 'lodash';

// google cloud app engine configuration
export const APP_YAML = (envs: { [name: string]: string }, serviceName?: string) => {

  let _serviceName = '';

  if (serviceName) {
    _serviceName = `service: ${serviceName}`;
  }

  let _envVarsTxt = '';
  _.forEach(envs, (val, key) => {
    _envVarsTxt = _envVarsTxt + key + ': "' + val + '"\n  '
  });

  const yaml =
    // Ignore warning the message in template below
    // it gets printed to app.yaml dynamically on build and deploy
    `
# STOP: IMPORTANT!!! DO NOT EDIT THIS FILE
# THIS CONFIGURATION IS AUTOMATICALLY GENERATED FROM /deployment/index.ts

# The app.yaml file defines your configuration settings for your Node.js
# runtime as well as general app, network, and other resource settings.
# https://cloud.google.com/appengine/docs/flexible/nodejs/reference/app-yaml

runtime: nodejs10

# This sample incurs costs to run on the App Engine flexible environment.
# The settings below are to reduce costs during testing and are not appropriate
# for production use. For more information, see:
# https://cloud.google.com/appengine/docs/flexible/nodejs/configuring-your-app-with-app-yaml
`+
    _serviceName
    +
    `
# runtime: nodejs
# env: flex
# manual_scaling:
#   instances: 1
# resources:
#   cpu: 1
#   memory_gb: 2
#   disk_size_gb: 10

entrypoint: npm run start

env_variables:

  ${_envVarsTxt}
`

  return yaml;
};

// google cloud app engine package.json deployment file
export const PACKAGE_JSON = (envs: { [name: string]: string }, name: string, dependencies: string, devDependencies: string, ) => {

  let nodeEnvs = '';
  _.forEach(envs, (val, key)=>{
    nodeEnvs = nodeEnvs + `${key}='${val}' `
  });

  const package_json =
`
{
    "name": "${name}",
    "scripts": {
        "start": "${nodeEnvs} node app.js",
        "system-test": "repo-tools test app",
        "test": "npm run system-test",
        "e2e-test": "repo-tools test deploy",
        "debug": "${nodeEnvs} node --nolazy --inspect-brk=9229 app.js"
    },
    "main": "build/app.js",
    "engines": {
        "node": ">=8"
    },
    "dependencies": ${dependencies},
    "devDependencies": ${devDependencies},
    "private": true
}
`;

  return package_json;
};

export const GCLOUD_GITIGNORE = () => {
  const ignore =
    `
# This file specifies files that are *not* uploaded to Google Cloud Platform
# using gcloud. It follows the same syntax as .gitignore, with the addition of
# "#!include" directives (which insert the entries of the given .gitignore-style
# file at that point).
#
# For more information, run:
#   $ gcloud topic gcloudignore
#
.gcloudignore
# If you would like to upload your .git directory, .gitignore file or files
# from your .gitignore file, remove the corresponding line
# below:
.git
.gitignore

# Node.js dependencies:
node_modules/

`
  return ignore;
};

export const TSCONFIG_DEV = () => `{
    "compilerOptions": {
      "module": "commonjs",
      "noUnusedLocals": true,
      "outDir": "lib",
      "sourceMap": true,
      "strict": true,
      "target": "es2015",
      "removeComments": true,
      "noImplicitReturns": true,
      "noImplicitAny": false,
      "experimentalDecorators": true,
      "allowUnreachableCode": false,
      "alwaysStrict": true,
      "pretty": true,
      "forceConsistentCasingInFileNames": true,
      "strictNullChecks": false,
      "rootDir": "src",
    },
    "compileOnSave": true,
    "include": [
      "src"
    ],
    "exclude": [
      "node_modules",
      "**/*.spec.ts"
    ]
  }`;

export const TSCONFIG_PROD = () => `
  {
    "compilerOptions": {
      "module": "commonjs",
      "noUnusedLocals": true,
      "outDir": "build",
      "sourceMap": false,
      "strict": true,
      "target": "es6",
      "removeComments": true,
      "noImplicitReturns": true,
      "noImplicitAny": false,
      "experimentalDecorators": true,
      "allowUnreachableCode": false,
      "alwaysStrict": true,
      "pretty": true,
      "forceConsistentCasingInFileNames": true,
      "strictNullChecks": false,
      "rootDir": "src"
    },
    "compileOnSave": true,
    "include": [
      "src"
    ],
    "exclude": [
      "node_modules",
      "**/*.spec.ts"
    ]
  }`;