// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
import { IRolesOptions } from '../shared/models/user.interface';
import { Request } from 'express';
import { IJWTTokenClaimsAndPayloadSecure } from '../shared/models/token.interface';


export interface IJWTDecodeResult {
    success: boolean;
    data?: IJWTTokenClaimsAndPayloadSecure;
}

export interface IVerifyCompare {
    endpoint: string;
    ip: string;
    account?: string;
}

export interface IRandomPepperObj {
    // the old prefix key value for signing tokens
    o: number;
    // c = the current prefix key to use for signing tokens
    // the current prefix that should be used to generated new pepper values
    // format - prefix should be a single character a-z; convention = "{1-1:XXXXXRandomStringHereXXXXX}"
    c: number;
    // v = array of random values must be less than {4096 characters for aws secrets manager to store serialized data}
    // old values should be provided in body and appended to new values array for lookup of new and old values
    v: { [prefix: string]: string };
}


export interface IDecodeResult {
    /**
     * base 64 encoded string
     *
     * @type {string}
     * @memberof IDecodeResult
     */
    encodedText: string;
    /**
     * if true, will return a json object rather than string
     *
     * @type {boolean}
     * @memberof IDecodeResult
     */
    getJson: boolean;
}

export interface IEncodeFirebaseCred {
    type: string;
    project_id: string;
    private_key_id: string;
    private_key: string;
    client_email: string;
    client_id: string;
    auth_uri: string;
    token_uri: string;
    auth_provider_x509_cert_url: string;
    client_x509_cert_url: string;
}

// export interface IAutomationShared {

//     /**
//      * participant_id per the participant registry
//      *
//      * @type {string}
//      * @memberof IAutomationShared
//      */
//     participantId: string;

//     /**
//      * InstitutionId is an id generated by firebase for a institutional account
//      * NOTE: institutions may have many participant ids
//      *
//      * @type {string}
//      * @memberof IAutomationShared
//      */
//     institutionId: string;

//     /**
//      * kubernetes (cluster) environment to target
//      *
//      * @type {string}
//      * @memberof IAutomationShared
//      */
//     env: 'dev' | 'qa' | 'st' | 'tn' | 'prod';

// }

// export interface IParticipantStackBody extends IAutomationShared {

//     /**
//      * Target Version of github gftn/gftn-services
//      *
//      * @type {string}
//      * @memberof ICreateParticipantBody
//      */
//     version: string;

//     /**
//      * Participant's target callback url
//      *
//      * @type {string}
//      * @memberof ICreateParticipantBody
//      */
//     callbackUrl: string;

// }

/**
 * Used to generate an access token
 *
 * @export
 * @interface IAccessTokenRequest
 */
export interface IAccessTokenRequest {

    /**
     * Expires in n milliseconds. Must be less than 86400000 (ie: 1 day in milliseconds)
     *
     * @type {number}
     * @memberof IAccessTokenRequest
     */
    exp?: number;

    /**
     * Emulates a logged in user by this email for IBMId and Firebase
     *
     * @type {string}
     * @memberof IAccessTokenRequest
     */
    email: string;


    /**
     * emulates the header value x-iid
     *
     * @type {string}
     * @memberof IAccessTokenRequest
     */
    iid: string;


    /**
     * firebase user id (aka: firebase uid)
     *
     * @type {string}
     * @memberof IAccessTokenRequest
     */
    uid: string;

}

export interface RequestEnv extends Request {
    // env: Environment;
    developerAccess: boolean;
}

export interface IFirebaseUserRequest extends RequestEnv {
    uid: string;
    participantPermissions: IRolesOptions;
    superPermissions: IRolesOptions;
    email: string;
}

export interface IPassportRequest extends RequestEnv {
    user?: IPassportUser;
}

export interface IJWTRequest extends IPassportRequest {
    decodedToken: IJWTTokenClaimsAndPayloadSecure;
    encodedToken: string;
    dbKey: string;
}

/**
 * The api (firebase admin sdk) is the only user
 * that should be able to write to this node in
 * the database. It is used to track authentication
 * related information associated with restricting
 * permissions
 *
 * @export
 * @interface IAuthVerify
 */
export interface IAuthVerify {

    // userId
    [uid: string]: {

        // allowable IP Addresses for user
        allowable: {
            [deviceInfoId: string]: {
                // allowed ip
                ip: string,
                // browser from which the request was sent
                // (used to identify device in ui)
                browser: string,
                // os from which the machine was sent
                // (used to identify device in ui)
                os: string
            }
        }
    };

}

export interface IPassportUser extends RequestEnv {
    accessToken: string;
    refreshToken: string;
    AUTHENTICATION_LEVEL: string;
    id: string;
    tenantId: string;
    displayName: string;
    emailAddress: string;
    _json: {
        iss: string;
        ext: {
            displayName: string;
            tenantId: string;
            userType: string;
        };
        at_hash: string;
        sub: string;
        address: { country: string; };
        email_verified: string;
        realmName: string;
        uniqueSecurityName: string;
        amr: any;
        preferred_username: string;
        given_name: string;
        iam_auth_policy: any;
        aud: string;
        name: string;
        exp: number;
        iat: number;
        family_name: string;
        email: string;
    };
}
