// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Automation Automation
//
// Automation deployment model
// swagger:model Automation
type Automation struct {

	// The business identifier code of each participant
	// Required: true
	// Max Length: 11
	// Min Length: 11
	// Pattern: ^[A-Z]{3}[A-Z]{3}[A-Z2-9]{1}[A-NP-Z0-9]{1}[A-Z0-9]{3}$
	Bic *string `json:"bic"`

	// Participant's country of residence, country code in ISO 3166-1 format
	// Required: true
	// Max Length: 3
	// Min Length: 3
	CountryCode *string `json:"countryCode"`

	// initialized
	// Required: true
	Initialized *bool `json:"initialized"`

	// institution Id
	// Required: true
	InstitutionID *string `json:"institutionId"`

	// The participant id for the participant
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	ParticipantID *string `json:"participantId"`

	// replica
	Replica string `json:"replica,omitempty"`

	// role
	// Required: true
	// Max Length: 2
	// Min Length: 2
	// Enum: [MM IS]
	Role *string `json:"role"`

	// status
	// Required: true
	Status []string `json:"status"`
}

// Validate validates this automation
func (m *Automation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialized(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstitutionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Automation) validateBic(formats strfmt.Registry) error {

	if err := validate.Required("bic", "body", m.Bic); err != nil {
		return err
	}

	if err := validate.MinLength("bic", "body", string(*m.Bic), 11); err != nil {
		return err
	}

	if err := validate.MaxLength("bic", "body", string(*m.Bic), 11); err != nil {
		return err
	}

	if err := validate.Pattern("bic", "body", string(*m.Bic), `^[A-Z]{3}[A-Z]{3}[A-Z2-9]{1}[A-NP-Z0-9]{1}[A-Z0-9]{3}$`); err != nil {
		return err
	}

	return nil
}

func (m *Automation) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MinLength("countryCode", "body", string(*m.CountryCode), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("countryCode", "body", string(*m.CountryCode), 3); err != nil {
		return err
	}

	return nil
}

func (m *Automation) validateInitialized(formats strfmt.Registry) error {

	if err := validate.Required("initialized", "body", m.Initialized); err != nil {
		return err
	}

	return nil
}

func (m *Automation) validateInstitutionID(formats strfmt.Registry) error {

	if err := validate.Required("institutionId", "body", m.InstitutionID); err != nil {
		return err
	}

	return nil
}

func (m *Automation) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participantId", "body", m.ParticipantID); err != nil {
		return err
	}

	if err := validate.MinLength("participantId", "body", string(*m.ParticipantID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("participantId", "body", string(*m.ParticipantID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("participantId", "body", string(*m.ParticipantID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

var automationTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MM","IS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		automationTypeRolePropEnum = append(automationTypeRolePropEnum, v)
	}
}

const (

	// AutomationRoleMM captures enum value "MM"
	AutomationRoleMM string = "MM"

	// AutomationRoleIS captures enum value "IS"
	AutomationRoleIS string = "IS"
)

// prop value enum
func (m *Automation) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, automationTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Automation) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if err := validate.MinLength("role", "body", string(*m.Role), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("role", "body", string(*m.Role), 2); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

var automationStatusItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","configuring","configuration_failed","complete","create_participant_entry_failed","create_iam_policy_failed","create_kafka_topic_failed","create_aws_secret_failed","create_aws_api_gateway_failed","create_aws_domain_custom_domain_name_failed","create_aws_route53_domain_failed","create_aws_dynamodb_failed","create_micro_services_failed","create_issuing_account_failed","create_operating_account_failed","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		automationStatusItemsEnum = append(automationStatusItemsEnum, v)
	}
}

func (m *Automation) validateStatusItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, automationStatusItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *Automation) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	for i := 0; i < len(m.Status); i++ {

		// value enum
		if err := m.validateStatusItemsEnum("status"+"."+strconv.Itoa(i), "body", m.Status[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Automation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Automation) UnmarshalBinary(b []byte) error {
	var res Automation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
