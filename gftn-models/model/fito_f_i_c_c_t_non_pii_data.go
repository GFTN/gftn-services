// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FitoFICCTNonPiiData fitoFICCTNonPiiData
//
// FI to FI CCT Non-Pii Data
// swagger:model FitoFICCTNonPiiData
type FitoFICCTNonPiiData struct {

	// The name of the operating or issuing account from which the payment is to be sent
	// Required: true
	AccountNameSend *string `json:"account_name_send" bson:"account_name_send"`

	// The RFI address where the payment is to be sent - received during federation protocol
	CreditorPaymentAddress string `json:"creditor_payment_address,omitempty" bson:"creditor_payment_address"`

	// Generated by originator, a unique ID for this entire use case
	// Required: true
	EndToEndID *string `json:"end_to_end_id" bson:"end_to_end_id"`

	// The exchange rate between settlement asset and beneficiary asset. not required if asset is same
	// Required: true
	// Multiple Of: 1e-07
	ExchangeRate *float64 `json:"exchange_rate" bson:"exchange_rate"`

	// This is the unique instruction id of the message
	// Required: true
	InstructionID *string `json:"instruction_id" bson:"instruction_id"`

	// This is the unique instruction id of the original pacs.008 message
	// Required: true
	OriginalInstructionID *string `json:"original_instruction_id" bson:"original_instruction_id"`

	// This is the reference to the original credit transfer message
	// Required: true
	OriginalMessageID *string `json:"original_message_id" bson:"original_message_id"`

	// transactiondetails
	// Required: true
	Transactiondetails *TransactionDetails `json:"transactiondetails"`
}

// Validate validates this fito f i c c t non pii data
func (m *FitoFICCTNonPiiData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNameSend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndToEndID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstructionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalInstructionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalMessageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactiondetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FitoFICCTNonPiiData) validateAccountNameSend(formats strfmt.Registry) error {

	if err := validate.Required("account_name_send", "body", m.AccountNameSend); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTNonPiiData) validateEndToEndID(formats strfmt.Registry) error {

	if err := validate.Required("end_to_end_id", "body", m.EndToEndID); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTNonPiiData) validateExchangeRate(formats strfmt.Registry) error {

	if err := validate.Required("exchange_rate", "body", m.ExchangeRate); err != nil {
		return err
	}

	if err := validate.MultipleOf("exchange_rate", "body", float64(*m.ExchangeRate), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTNonPiiData) validateInstructionID(formats strfmt.Registry) error {

	if err := validate.Required("instruction_id", "body", m.InstructionID); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTNonPiiData) validateOriginalInstructionID(formats strfmt.Registry) error {

	if err := validate.Required("original_instruction_id", "body", m.OriginalInstructionID); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTNonPiiData) validateOriginalMessageID(formats strfmt.Registry) error {

	if err := validate.Required("original_message_id", "body", m.OriginalMessageID); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTNonPiiData) validateTransactiondetails(formats strfmt.Registry) error {

	if err := validate.Required("transactiondetails", "body", m.Transactiondetails); err != nil {
		return err
	}

	if m.Transactiondetails != nil {
		if err := m.Transactiondetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transactiondetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FitoFICCTNonPiiData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FitoFICCTNonPiiData) UnmarshalBinary(b []byte) error {
	var res FitoFICCTNonPiiData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
