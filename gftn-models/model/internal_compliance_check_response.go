// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InternalComplianceCheckResponse internalComplianceCheckResponse
//
// InternalComplianceCheckResponse
// swagger:model InternalComplianceCheckResponse
type InternalComplianceCheckResponse struct {

	// AML/KYC/Sanctions info of the recipient
	// Required: true
	AmlKycInfo *string `json:"aml_kyc_info"`

	// The unique identifier for the compliance check done prior to this payment
	// Required: true
	ComplianceIdentification *string `json:"compliance_identification"`

	// OK or Denied
	// Required: true
	// Enum: [OK Denied]
	Disposition *string `json:"disposition"`
}

// Validate validates this internal compliance check response
func (m *InternalComplianceCheckResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmlKycInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplianceIdentification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisposition(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InternalComplianceCheckResponse) validateAmlKycInfo(formats strfmt.Registry) error {

	if err := validate.Required("aml_kyc_info", "body", m.AmlKycInfo); err != nil {
		return err
	}

	return nil
}

func (m *InternalComplianceCheckResponse) validateComplianceIdentification(formats strfmt.Registry) error {

	if err := validate.Required("compliance_identification", "body", m.ComplianceIdentification); err != nil {
		return err
	}

	return nil
}

var internalComplianceCheckResponseTypeDispositionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		internalComplianceCheckResponseTypeDispositionPropEnum = append(internalComplianceCheckResponseTypeDispositionPropEnum, v)
	}
}

const (

	// InternalComplianceCheckResponseDispositionOK captures enum value "OK"
	InternalComplianceCheckResponseDispositionOK string = "OK"

	// InternalComplianceCheckResponseDispositionDenied captures enum value "Denied"
	InternalComplianceCheckResponseDispositionDenied string = "Denied"
)

// prop value enum
func (m *InternalComplianceCheckResponse) validateDispositionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, internalComplianceCheckResponseTypeDispositionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InternalComplianceCheckResponse) validateDisposition(formats strfmt.Registry) error {

	if err := validate.Required("disposition", "body", m.Disposition); err != nil {
		return err
	}

	// value enum
	if err := m.validateDispositionEnum("disposition", "body", *m.Disposition); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InternalComplianceCheckResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InternalComplianceCheckResponse) UnmarshalBinary(b []byte) error {
	var res InternalComplianceCheckResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
