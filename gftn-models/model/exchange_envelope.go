// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeEnvelope exchangeEnvelope
//
// Exchange Envelope
// swagger:model ExchangeEnvelope
type ExchangeEnvelope struct {

	// base64 encoded [exchange](??base_url??/docs/??version??/api/participant-client-callback-api?jump=model_exchange) object
	// Required: true
	Exchange *string `json:"exchange"`

	// base64 encoded exchange object signature
	// Required: true
	Signature *string `json:"signature"`
}

// Validate validates this exchange envelope
func (m *ExchangeEnvelope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeEnvelope) validateExchange(formats strfmt.Registry) error {

	if err := validate.Required("exchange", "body", m.Exchange); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeEnvelope) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeEnvelope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeEnvelope) UnmarshalBinary(b []byte) error {
	var res ExchangeEnvelope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
