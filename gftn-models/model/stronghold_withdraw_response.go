// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StrongholdWithdrawResponse strongholdWithdrawResponse
//
// strongholdWithdrawResponse
// swagger:model StrongholdWithdrawResponse
type StrongholdWithdrawResponse struct {

	// request Id
	// Required: true
	RequestID *string `json:"requestId"`

	// result
	// Required: true
	Result *StrongholdResponseResult `json:"result"`

	// status code
	// Required: true
	StatusCode *int64 `json:"statusCode"`

	// success
	// Required: true
	Success *bool `json:"success"`

	// timestamp
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this stronghold withdraw response
func (m *StrongholdWithdrawResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrongholdWithdrawResponse) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("requestId", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdWithdrawResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *StrongholdWithdrawResponse) validateStatusCode(formats strfmt.Registry) error {

	if err := validate.Required("statusCode", "body", m.StatusCode); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdWithdrawResponse) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdWithdrawResponse) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StrongholdWithdrawResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StrongholdWithdrawResponse) UnmarshalBinary(b []byte) error {
	var res StrongholdWithdrawResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
