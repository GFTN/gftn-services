// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FitoFICCTMemoData fitoFICCTMemoData
//
// FI to FI CCT Memo Data - the hash value of this will be stored in the transaction memo field
// swagger:model fitoFICCTMemoData
type FitoFICCTMemoData struct {

	// The hash value of the FI to FI CCT Pii Data
	// Required: true
	FitoficctPiiHash *string `json:"fitoficct_pii_hash" bson:"fitoficct_pii_hash"`

	// fitoficctnonpiidata
	// Required: true
	Fitoficctnonpiidata *FitoFICCTNonPiiData `json:"fitoficctnonpiidata"`

	// Unique autogenerate ID for mongoDB primary key
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	ID string `json:"id,omitempty" bson:"_id"`

	// This is the message name of the transaction request
	// Required: true
	MessageName *string `json:"message_name" bson:"message_name"`

	// This is the message type of the transaction request
	// Required: true
	MessageType *string `json:"message_type" bson:"message_type"`

	// The participant id of the OFI (payment sender)
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	OfiID *string `json:"ofi_id" bson:"ofi_domain"`

	// The timestamp for this transaction
	// Required: true
	TimeStamp *int64 `json:"time_stamp" bson:"time_stamp"`

	// This is the unique id for this transaction generated by the distributed ledger (but not in txn memo hash)
	TransactionIdentifier []string `json:"transaction_identifier" bson:"transaction_identifier"`

	// This would capture the new status of a transaction while transaction travel through payment flow.
	// Required: true
	TransactionStatus []*TransactionReceipt `json:"transaction_status" bson:"transaction_status"`
}

// Validate validates this fito f i c c t memo data
func (m *FitoFICCTMemoData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFitoficctPiiHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFitoficctnonpiidata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FitoFICCTMemoData) validateFitoficctPiiHash(formats strfmt.Registry) error {

	if err := validate.Required("fitoficct_pii_hash", "body", m.FitoficctPiiHash); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTMemoData) validateFitoficctnonpiidata(formats strfmt.Registry) error {

	if err := validate.Required("fitoficctnonpiidata", "body", m.Fitoficctnonpiidata); err != nil {
		return err
	}

	if m.Fitoficctnonpiidata != nil {
		if err := m.Fitoficctnonpiidata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fitoficctnonpiidata")
			}
			return err
		}
	}

	return nil
}

func (m *FitoFICCTMemoData) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", string(m.ID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTMemoData) validateMessageName(formats strfmt.Registry) error {

	if err := validate.Required("message_name", "body", m.MessageName); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTMemoData) validateMessageType(formats strfmt.Registry) error {

	if err := validate.Required("message_type", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTMemoData) validateOfiID(formats strfmt.Registry) error {

	if err := validate.Required("ofi_id", "body", m.OfiID); err != nil {
		return err
	}

	if err := validate.MinLength("ofi_id", "body", string(*m.OfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ofi_id", "body", string(*m.OfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("ofi_id", "body", string(*m.OfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTMemoData) validateTimeStamp(formats strfmt.Registry) error {

	if err := validate.Required("time_stamp", "body", m.TimeStamp); err != nil {
		return err
	}

	return nil
}

func (m *FitoFICCTMemoData) validateTransactionStatus(formats strfmt.Registry) error {

	if err := validate.Required("transaction_status", "body", m.TransactionStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionStatus); i++ {
		if swag.IsZero(m.TransactionStatus[i]) { // not required
			continue
		}

		if m.TransactionStatus[i] != nil {
			if err := m.TransactionStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction_status" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FitoFICCTMemoData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FitoFICCTMemoData) UnmarshalBinary(b []byte) error {
	var res FitoFICCTMemoData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
