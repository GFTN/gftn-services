// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComplianceReceipt complianceReceipt
//
// Compliance Receipt
// swagger:model ComplianceReceipt
type ComplianceReceipt struct {

	// AML/KYC/Sanctions info of the recipient.
	// Required: true
	AmlKyc *string `json:"aml_kyc"`

	// The unique identifier for the compliance check done prior to this payment.
	//
	// Required: true
	ComplianceID *string `json:"compliance_id"`

	// "OK" or "Denied"
	//
	// Required: true
	// Enum: [OK Denied]
	ComplianceStatus *string `json:"compliance_status"`

	// "OK" or "Denied"
	//
	// Enum: [OK Denied]
	SanctionsStatus string `json:"sanctions_status,omitempty"`
}

// Validate validates this compliance receipt
func (m *ComplianceReceipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmlKyc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplianceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComplianceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanctionsStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComplianceReceipt) validateAmlKyc(formats strfmt.Registry) error {

	if err := validate.Required("aml_kyc", "body", m.AmlKyc); err != nil {
		return err
	}

	return nil
}

func (m *ComplianceReceipt) validateComplianceID(formats strfmt.Registry) error {

	if err := validate.Required("compliance_id", "body", m.ComplianceID); err != nil {
		return err
	}

	return nil
}

var complianceReceiptTypeComplianceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		complianceReceiptTypeComplianceStatusPropEnum = append(complianceReceiptTypeComplianceStatusPropEnum, v)
	}
}

const (

	// ComplianceReceiptComplianceStatusOK captures enum value "OK"
	ComplianceReceiptComplianceStatusOK string = "OK"

	// ComplianceReceiptComplianceStatusDenied captures enum value "Denied"
	ComplianceReceiptComplianceStatusDenied string = "Denied"
)

// prop value enum
func (m *ComplianceReceipt) validateComplianceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, complianceReceiptTypeComplianceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComplianceReceipt) validateComplianceStatus(formats strfmt.Registry) error {

	if err := validate.Required("compliance_status", "body", m.ComplianceStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateComplianceStatusEnum("compliance_status", "body", *m.ComplianceStatus); err != nil {
		return err
	}

	return nil
}

var complianceReceiptTypeSanctionsStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		complianceReceiptTypeSanctionsStatusPropEnum = append(complianceReceiptTypeSanctionsStatusPropEnum, v)
	}
}

const (

	// ComplianceReceiptSanctionsStatusOK captures enum value "OK"
	ComplianceReceiptSanctionsStatusOK string = "OK"

	// ComplianceReceiptSanctionsStatusDenied captures enum value "Denied"
	ComplianceReceiptSanctionsStatusDenied string = "Denied"
)

// prop value enum
func (m *ComplianceReceipt) validateSanctionsStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, complianceReceiptTypeSanctionsStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ComplianceReceipt) validateSanctionsStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.SanctionsStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateSanctionsStatusEnum("sanctions_status", "body", m.SanctionsStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComplianceReceipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComplianceReceipt) UnmarshalBinary(b []byte) error {
	var res ComplianceReceipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
