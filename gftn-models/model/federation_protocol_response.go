// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FederationProtocolResponse federationProtocolResponse
//
// Federation protocol response
// swagger:model FederationProtocolResponse
type FederationProtocolResponse struct {

	// The account ID of the receiver.  Should be the same as the account identifier for GFTN
	// Required: true
	AccountID *string `json:"account_id"`

	// Optional, should be used for the compliance and payment operation
	// Required: true
	Memo *string `json:"memo"`

	// Should always be "text" for GFTN
	// Required: true
	// Enum: [text]
	MemoType *string `json:"memo_type"`

	// The stellar address of account which, once compliance checks are complete, is expected to be the receiving address for this transaction
	ReceivingAccountAddress string `json:"receiving_account_address,omitempty"`
}

// Validate validates this federation protocol response
func (m *FederationProtocolResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemoType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FederationProtocolResponse) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *FederationProtocolResponse) validateMemo(formats strfmt.Registry) error {

	if err := validate.Required("memo", "body", m.Memo); err != nil {
		return err
	}

	return nil
}

var federationProtocolResponseTypeMemoTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["text"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		federationProtocolResponseTypeMemoTypePropEnum = append(federationProtocolResponseTypeMemoTypePropEnum, v)
	}
}

const (

	// FederationProtocolResponseMemoTypeText captures enum value "text"
	FederationProtocolResponseMemoTypeText string = "text"
)

// prop value enum
func (m *FederationProtocolResponse) validateMemoTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, federationProtocolResponseTypeMemoTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FederationProtocolResponse) validateMemoType(formats strfmt.Registry) error {

	if err := validate.Required("memo_type", "body", m.MemoType); err != nil {
		return err
	}

	// value enum
	if err := m.validateMemoTypeEnum("memo_type", "body", *m.MemoType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FederationProtocolResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FederationProtocolResponse) UnmarshalBinary(b []byte) error {
	var res FederationProtocolResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
