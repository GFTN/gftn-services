// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransactionFees transactionFees
//
// Fees related to a transaction, sent back by a Participant (RFI).
// swagger:model TransactionFees
type TransactionFees struct {

	// The fee amount (always in asset_settlement), should be a float64 number. Gross_settlement amount will be amount_settlement plus the fee.
	// Required: true
	// Multiple Of: 1e-07
	AmountFee *float64 `json:"amount_fee"`

	// Amount (in payout asset) the RFI pays ultimate beneficiary (recipient).
	// Required: true
	// Multiple Of: 1e-07
	AmountPayout *float64 `json:"amount_payout"`

	// Amount (in settlement asset) the OFI transfers to the RFI on the ledger (exclusive of RFI Fees).
	// Required: true
	// Multiple Of: 1e-07
	AmountSettlement *float64 `json:"amount_settlement"`

	// The 3-letter asset identifier of the payment to the ultimate beneficiary (recipient).
	// Required: true
	AssetCodePayout *string `json:"asset_code_payout"`

	// details asset settlement
	// Required: true
	DetailsAssetSettlement *Asset `json:"details_asset_settlement"`

	// details payout location
	DetailsPayoutLocation *PayoutLocation `json:"details_payout_location,omitempty"`

	// a unique id for this fee request
	// Required: true
	RequestID *string `json:"request_id"`
}

// Validate validates this transaction fees
func (m *TransactionFees) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountPayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountSettlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetCodePayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailsAssetSettlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailsPayoutLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransactionFees) validateAmountFee(formats strfmt.Registry) error {

	if err := validate.Required("amount_fee", "body", m.AmountFee); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount_fee", "body", float64(*m.AmountFee), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFees) validateAmountPayout(formats strfmt.Registry) error {

	if err := validate.Required("amount_payout", "body", m.AmountPayout); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount_payout", "body", float64(*m.AmountPayout), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFees) validateAmountSettlement(formats strfmt.Registry) error {

	if err := validate.Required("amount_settlement", "body", m.AmountSettlement); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount_settlement", "body", float64(*m.AmountSettlement), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFees) validateAssetCodePayout(formats strfmt.Registry) error {

	if err := validate.Required("asset_code_payout", "body", m.AssetCodePayout); err != nil {
		return err
	}

	return nil
}

func (m *TransactionFees) validateDetailsAssetSettlement(formats strfmt.Registry) error {

	if err := validate.Required("details_asset_settlement", "body", m.DetailsAssetSettlement); err != nil {
		return err
	}

	if m.DetailsAssetSettlement != nil {
		if err := m.DetailsAssetSettlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details_asset_settlement")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFees) validateDetailsPayoutLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailsPayoutLocation) { // not required
		return nil
	}

	if m.DetailsPayoutLocation != nil {
		if err := m.DetailsPayoutLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details_payout_location")
			}
			return err
		}
	}

	return nil
}

func (m *TransactionFees) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("request_id", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransactionFees) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionFees) UnmarshalBinary(b []byte) error {
	var res TransactionFees
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
