// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/shopspring/decimal"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Quote quote
//
// Quote
// swagger:model Quote
type Quote struct {

	// rfi operating or issuing account to receive source asset
	// Required: true
	AccountNameReceive *string `json:"account_name_receive"`

	// rfi operating or issuing account to send back target asset
	// Required: true
	AccountNameSend *string `json:"account_name_send"`

	// The source-asset price of the target asset
	// Required: true
	ExchangeRate *decimal.Decimal `json:"exchange_rate"`

	// Maximum units for which this quote is valid
	// Required: true
	LimitMax *decimal.Decimal `json:"limit_max"`

	// Minimum units for which this quote is valid
	LimitMin *decimal.Decimal `json:"limit_min,omitempty"`

	// Unique id for this quote as set by the quote service
	// Required: true
	QuoteID *string `json:"quote_id"`

	// quote request
	// Required: true
	QuoteRequest *QuoteRequest `json:"quote_request"`

	// The ID that identifies the RFI Participant on the WorldWire network (i.e. uk.yourbankintheUK.payments.ibm.com).
	//
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	RfiID *string `json:"rfi_id"`

	// End-time for this quote to be valid.
	// Required: true
	TimeExpire *int64 `json:"time_expire"`

	// Start time for this quote to be valid.
	// Required: true
	TimeStart *int64 `json:"time_start"`
}

// Validate validates this quote
func (m *Quote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNameReceive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNameSend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimitMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.sanityCheck(); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Quote) sanityCheck() error {
	if m.LimitMin != nil && m.LimitMax != nil {
		if m.LimitMin != nil && m.LimitMax.LessThan(*m.LimitMin) {
			msg := "limit_max < limit_min"
			return errors.New(1, msg)
		}
	}
	if m.TimeExpire != nil {
		if *m.TimeExpire < time.Now().Unix() {
			msg := "time_expire < time_now"
			return errors.New(2, msg)
		}
	}
	if m.TimeExpire != nil && m.TimeStart != nil {
		if *m.TimeExpire < *m.TimeStart {
			msg := "time_expire < time_start"
			return errors.New(3, msg)
		}
	}
	return nil
}

func (m *Quote) validateAccountNameReceive(formats strfmt.Registry) error {

	if err := validate.Required("account_name_receive", "body", m.AccountNameReceive); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateAccountNameSend(formats strfmt.Registry) error {

	if err := validate.Required("account_name_send", "body", m.AccountNameSend); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateExchangeRate(formats strfmt.Registry) error {

	if err := validate.Required("exchange_rate", "body", m.ExchangeRate); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateLimitMax(formats strfmt.Registry) error {

	if err := validate.Required("limit_max", "body", m.LimitMax); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateLimitMin(formats strfmt.Registry) error {

	// if swag.IsZero(m.LimitMin) { // not required
	// 	return nil
	// }

	return nil
}

func (m *Quote) validateQuoteID(formats strfmt.Registry) error {

	if err := validate.Required("quote_id", "body", m.QuoteID); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateQuoteRequest(formats strfmt.Registry) error {

	if err := validate.Required("quote_request", "body", m.QuoteRequest); err != nil {
		return err
	}

	if m.QuoteRequest != nil {
		if err := m.QuoteRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote_request")
			}
			return err
		}
	}

	return nil
}

func (m *Quote) validateRfiID(formats strfmt.Registry) error {

	if err := validate.Required("rfi_id", "body", m.RfiID); err != nil {
		return err
	}

	if err := validate.MinLength("rfi_id", "body", string(*m.RfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("rfi_id", "body", string(*m.RfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("rfi_id", "body", string(*m.RfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateTimeExpire(formats strfmt.Registry) error {

	if err := validate.Required("time_expire", "body", m.TimeExpire); err != nil {
		return err
	}

	return nil
}

func (m *Quote) validateTimeStart(formats strfmt.Registry) error {

	if err := validate.Required("time_start", "body", m.TimeStart); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Quote) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Quote) UnmarshalBinary(b []byte) error {
	var res Quote
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
