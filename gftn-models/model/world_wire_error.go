// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorldWireError error
//
// Error
// swagger:model WorldWireError
type WorldWireError struct {

	// build version string of micro service
	BuildVersion string `json:"build_version,omitempty"`

	// Error code reference.
	Code string `json:"code,omitempty"`

	// Detailed message description about error.
	// Required: true
	Details *string `json:"details"`

	// Short message description about error.
	// Required: true
	Message *string `json:"message"`

	// participant id, same as home domain as set by environment variables
	ParticipantID string `json:"participant_id,omitempty"`

	// name of micro service
	Service string `json:"service,omitempty"`

	// The timestamp of the occurance.
	// Required: true
	TimeStamp *int64 `json:"time_stamp"`

	// Type is for query purposes, it an identifier to assist with troubleshooting where an error came from (eg, containing func name) tells us if it is originating from NotifyWWError vs. NotFound vs. some other spot
	Type string `json:"type,omitempty"`

	// Url of endpoint that failed.
	URL string `json:"url,omitempty"`
}

// Validate validates this world wire error
func (m *WorldWireError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorldWireError) validateDetails(formats strfmt.Registry) error {

	if err := validate.Required("details", "body", m.Details); err != nil {
		return err
	}

	return nil
}

func (m *WorldWireError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *WorldWireError) validateTimeStamp(formats strfmt.Registry) error {

	if err := validate.Required("time_stamp", "body", m.TimeStamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorldWireError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorldWireError) UnmarshalBinary(b []byte) error {
	var res WorldWireError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
