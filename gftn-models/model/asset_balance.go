// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetBalance balance
//
// Balance
// swagger:model AssetBalance
type AssetBalance struct {

	// The name of the account, operting account name or "issuing" for issuing account
	// Required: true
	AccountName *string `json:"account_name"`

	// A name to identify the asset
	// Required: true
	AssetCode *string `json:"asset_code"`

	// Balance for a given asset
	// Required: true
	Balance *string `json:"balance"`

	// Participant id to identify the issuer for this asset
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	IssuerID string `json:"issuer_id,omitempty"`
}

// Validate validates this asset balance
func (m *AssetBalance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBalance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssetBalance) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *AssetBalance) validateAssetCode(formats strfmt.Registry) error {

	if err := validate.Required("asset_code", "body", m.AssetCode); err != nil {
		return err
	}

	return nil
}

func (m *AssetBalance) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *AssetBalance) validateIssuerID(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuerID) { // not required
		return nil
	}

	if err := validate.MinLength("issuer_id", "body", string(m.IssuerID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("issuer_id", "body", string(m.IssuerID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("issuer_id", "body", string(m.IssuerID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetBalance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetBalance) UnmarshalBinary(b []byte) error {
	var res AssetBalance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
