// © Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StellarComplianceData stellarComplianceData
//
// StellarComplianceData
// swagger:model StellarComplianceData
type StellarComplianceData struct {

	// The full text of the attachment. The hash of this attachment is included as a memo in the transaction. The attachment field follows the Stellar Attachment Convention and should contain at least enough information of the sender to allow the receiving FI to do their sanction check.
	// Required: true
	Attachment *string `json:"attachment"`

	// If the caller needs the recipient’s AML info in order to send the payment. Should ALWAYS be set to true
	// Required: true
	NeedInfo *bool `json:"need_info"`

	// The payment address of the customer that is initiating the send. Ex. 100110193832*uk.bank.payments.gftn.io
	// Required: true
	Sender *string `json:"sender"`

	// The transaction that the sender would like to send in XDR format. This transaction is unsigned and it’s sequence number should be equal 0.
	// Required: true
	Tx *string `json:"tx"`
}

// Validate validates this stellar compliance data
func (m *StellarComplianceData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeedInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StellarComplianceData) validateAttachment(formats strfmt.Registry) error {

	if err := validate.Required("attachment", "body", m.Attachment); err != nil {
		return err
	}

	return nil
}

func (m *StellarComplianceData) validateNeedInfo(formats strfmt.Registry) error {

	if err := validate.Required("need_info", "body", m.NeedInfo); err != nil {
		return err
	}

	return nil
}

func (m *StellarComplianceData) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	return nil
}

func (m *StellarComplianceData) validateTx(formats strfmt.Registry) error {

	if err := validate.Required("tx", "body", m.Tx); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StellarComplianceData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StellarComplianceData) UnmarshalBinary(b []byte) error {
	var res StellarComplianceData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
