// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Funding funding
//
// Details about a Funding
// swagger:model Funding
type Funding struct {

	// The name of an operating account or "issuing" for an issuing account.
	//
	AccountName string `json:"account_name,omitempty"`

	// The amount that the Anchor is funding the Participant.
	// Required: true
	// Multiple Of: 1e-07
	AmountFunding *float64 `json:"amount_funding"`

	// Identifier of the World Wire Anchor that will fund the Participant with stablecoins. (i.e., "thebestbankintheUK")
	//
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	AnchorID *string `json:"anchor_id"`

	// Identifier of the stable coin asset issued by the Anchor. For a list of assets, retrieve all World Wire assets from the /assets endpoint.
	//
	// Required: true
	AssetCodeIssued *string `json:"asset_code_issued"`

	// Generated by the anchor, a unique ID for this funding request
	// Required: true
	EndToEndID *string `json:"end_to_end_id"`

	// An optional way for anchor to name a transaction.
	MemoTransaction string `json:"memo_transaction,omitempty"`

	// Identifier of the World Wire Participant that will receive the funding.
	//
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	ParticipantID *string `json:"participant_id"`
}

// Validate validates this funding
func (m *Funding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountFunding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnchorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetCodeIssued(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndToEndID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Funding) validateAmountFunding(formats strfmt.Registry) error {

	if err := validate.Required("amount_funding", "body", m.AmountFunding); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount_funding", "body", float64(*m.AmountFunding), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *Funding) validateAnchorID(formats strfmt.Registry) error {

	if err := validate.Required("anchor_id", "body", m.AnchorID); err != nil {
		return err
	}

	if err := validate.MinLength("anchor_id", "body", string(*m.AnchorID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("anchor_id", "body", string(*m.AnchorID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("anchor_id", "body", string(*m.AnchorID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *Funding) validateAssetCodeIssued(formats strfmt.Registry) error {

	if err := validate.Required("asset_code_issued", "body", m.AssetCodeIssued); err != nil {
		return err
	}

	return nil
}

func (m *Funding) validateEndToEndID(formats strfmt.Registry) error {

	if err := validate.Required("end_to_end_id", "body", m.EndToEndID); err != nil {
		return err
	}

	return nil
}

func (m *Funding) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participant_id", "body", m.ParticipantID); err != nil {
		return err
	}

	if err := validate.MinLength("participant_id", "body", string(*m.ParticipantID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("participant_id", "body", string(*m.ParticipantID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("participant_id", "body", string(*m.ParticipantID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Funding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Funding) UnmarshalBinary(b []byte) error {
	var res Funding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
