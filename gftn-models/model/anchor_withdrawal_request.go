// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnchorWithdrawalRequest settlement
//
// Settlement
// swagger:model AnchorWithdrawalRequest
type AnchorWithdrawalRequest struct {

	// Name of operating or issuing account to send asset from.
	// Required: true
	AccountName *string `json:"account_name"`

	// amount
	// Required: true
	// Multiple Of: 1e-07
	Amount *float64 `json:"amount"`

	// The ID that identifies the Anchor Participant on the WorldWire network.
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	AnchorID *string `json:"anchor_id"`

	// The identifier of the asset issued by the Anchor. For a list of assets, retrieve all World Wire assets from the /assets endpoint.
	// Required: true
	AssetCode *string `json:"asset_code"`

	// creditor
	// Required: true
	Creditor *PaymentActor `json:"creditor"`

	// Generated by originator, a unique ID for this entire use case
	EndToEndID string `json:"end_to_end_id,omitempty"`

	// An optional way for customers to name a transaction.
	TransactionNote string `json:"transaction_note,omitempty"`
}

// Validate validates this anchor withdrawal request
func (m *AnchorWithdrawalRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnchorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditor(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnchorWithdrawalRequest) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *AnchorWithdrawalRequest) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MultipleOf("amount", "body", float64(*m.Amount), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *AnchorWithdrawalRequest) validateAnchorID(formats strfmt.Registry) error {

	if err := validate.Required("anchor_id", "body", m.AnchorID); err != nil {
		return err
	}

	if err := validate.MinLength("anchor_id", "body", string(*m.AnchorID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("anchor_id", "body", string(*m.AnchorID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("anchor_id", "body", string(*m.AnchorID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *AnchorWithdrawalRequest) validateAssetCode(formats strfmt.Registry) error {

	if err := validate.Required("asset_code", "body", m.AssetCode); err != nil {
		return err
	}

	return nil
}

func (m *AnchorWithdrawalRequest) validateCreditor(formats strfmt.Registry) error {

	if err := validate.Required("creditor", "body", m.Creditor); err != nil {
		return err
	}

	if m.Creditor != nil {
		if err := m.Creditor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creditor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnchorWithdrawalRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnchorWithdrawalRequest) UnmarshalBinary(b []byte) error {
	var res AnchorWithdrawalRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
