// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FItoFICCTPiiData fitoFICCTPiiData
//
// FI to FI CCT Pii Data - contains PII information
// swagger:model FItoFICCTPiiData
type FItoFICCTPiiData struct {

	// creditor information
	// Required: true
	CreditorInformation *PaymentActor `json:"creditor_information"`

	// debtor information
	// Required: true
	DebtorInformation *PaymentActor `json:"debtor_information"`
}

// Validate validates this f ito f i c c t pii data
func (m *FItoFICCTPiiData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreditorInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FItoFICCTPiiData) validateCreditorInformation(formats strfmt.Registry) error {

	if err := validate.Required("creditor_information", "body", m.CreditorInformation); err != nil {
		return err
	}

	if m.CreditorInformation != nil {
		if err := m.CreditorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creditor_information")
			}
			return err
		}
	}

	return nil
}

func (m *FItoFICCTPiiData) validateDebtorInformation(formats strfmt.Registry) error {

	if err := validate.Required("debtor_information", "body", m.DebtorInformation); err != nil {
		return err
	}

	if m.DebtorInformation != nil {
		if err := m.DebtorInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtor_information")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FItoFICCTPiiData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FItoFICCTPiiData) UnmarshalBinary(b []byte) error {
	var res FItoFICCTPiiData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
