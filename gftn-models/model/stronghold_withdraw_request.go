// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StrongholdWithdrawRequest strongholdWithdrawRequest
//
// strongholdWithdrawRequest
// swagger:model StrongholdWithdrawRequest
type StrongholdWithdrawRequest struct {

	// asset ID issued by an anchor
	// Required: true
	AssetID *string `json:"assetID"`

	// customer reference
	// Required: true
	CustomerReference *string `json:"customerReference"`

	// payment method information typically \"us-ach\"
	// Required: true
	PaymentMethod *string `json:"paymentMethod"`

	// payment method details
	// Required: true
	PaymentMethodDetails *StrongholdPaymentMethodDetails `json:"paymentMethodDetails"`
}

// Validate validates this stronghold withdraw request
func (m *StrongholdWithdrawRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrongholdWithdrawRequest) validateAssetID(formats strfmt.Registry) error {

	if err := validate.Required("assetID", "body", m.AssetID); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdWithdrawRequest) validateCustomerReference(formats strfmt.Registry) error {

	if err := validate.Required("customerReference", "body", m.CustomerReference); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdWithdrawRequest) validatePaymentMethod(formats strfmt.Registry) error {

	if err := validate.Required("paymentMethod", "body", m.PaymentMethod); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdWithdrawRequest) validatePaymentMethodDetails(formats strfmt.Registry) error {

	if err := validate.Required("paymentMethodDetails", "body", m.PaymentMethodDetails); err != nil {
		return err
	}

	if m.PaymentMethodDetails != nil {
		if err := m.PaymentMethodDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentMethodDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StrongholdWithdrawRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StrongholdWithdrawRequest) UnmarshalBinary(b []byte) error {
	var res StrongholdWithdrawRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
