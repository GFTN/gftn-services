// © Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StellarComplianceResponse stellarComplianceResponse
//
// StellarComplianceResponse
// swagger:model StellarComplianceResponse
type StellarComplianceResponse struct {

	// Marshalled JSON of the recipient’s AML information. (only present if info_status is ok)
	DestInfo string `json:"dest_info,omitempty"`

	// If this FI is willing to share AML information or not.
	// Required: true
	InfoStatus *string `json:"info_status"`

	// If this FI is willing to accept this transaction.
	// Required: true
	TxStatus *string `json:"tx_status"`
}

// Validate validates this stellar compliance response
func (m *StellarComplianceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfoStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTxStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StellarComplianceResponse) validateInfoStatus(formats strfmt.Registry) error {

	if err := validate.Required("info_status", "body", m.InfoStatus); err != nil {
		return err
	}

	return nil
}

func (m *StellarComplianceResponse) validateTxStatus(formats strfmt.Registry) error {

	if err := validate.Required("tx_status", "body", m.TxStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StellarComplianceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StellarComplianceResponse) UnmarshalBinary(b []byte) error {
	var res StellarComplianceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
