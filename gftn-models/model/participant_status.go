// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ParticipantStatus participantStatus
//
// ParticipantStatus
// swagger:model ParticipantStatus
type ParticipantStatus struct {

	// Participant active status on WW network, inactive, active, suspended
	// Required: true
	// Enum: [inactive active suspended]
	Status *string `json:"status"`
}

// Validate validates this participant status
func (m *ParticipantStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var participantStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["inactive","active","suspended"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		participantStatusTypeStatusPropEnum = append(participantStatusTypeStatusPropEnum, v)
	}
}

const (

	// ParticipantStatusStatusInactive captures enum value "inactive"
	ParticipantStatusStatusInactive string = "inactive"

	// ParticipantStatusStatusActive captures enum value "active"
	ParticipantStatusStatusActive string = "active"

	// ParticipantStatusStatusSuspended captures enum value "suspended"
	ParticipantStatusStatusSuspended string = "suspended"
)

// prop value enum
func (m *ParticipantStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, participantStatusTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ParticipantStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParticipantStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParticipantStatus) UnmarshalBinary(b []byte) error {
	var res ParticipantStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
