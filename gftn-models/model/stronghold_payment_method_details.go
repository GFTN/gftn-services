// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StrongholdPaymentMethodDetails strongholdPaymentMethodDetails
//
// strongholdPaymentMethodDetails
// swagger:model StrongholdPaymentMethodDetails
type StrongholdPaymentMethodDetails struct {

	// DA amount to be returned
	// Required: true
	Amount *string `json:"amount"`

	// bank account number
	// Required: true
	BankAccountNumber *string `json:"bank_account_number"`

	// bank account type
	// Required: true
	BankAccountType *string `json:"bank_account_type"`

	// name of bank
	// Required: true
	BankName *string `json:"bank_name"`

	// routing number
	// Required: true
	BankRoutingNumber *string `json:"bank_routing_number"`

	// initiator ip
	// Required: true
	InitiatorIP *string `json:"initiator_ip"`
}

// Validate validates this stronghold payment method details
func (m *StrongholdPaymentMethodDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBankRoutingNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitiatorIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrongholdPaymentMethodDetails) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdPaymentMethodDetails) validateBankAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("bank_account_number", "body", m.BankAccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdPaymentMethodDetails) validateBankAccountType(formats strfmt.Registry) error {

	if err := validate.Required("bank_account_type", "body", m.BankAccountType); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdPaymentMethodDetails) validateBankName(formats strfmt.Registry) error {

	if err := validate.Required("bank_name", "body", m.BankName); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdPaymentMethodDetails) validateBankRoutingNumber(formats strfmt.Registry) error {

	if err := validate.Required("bank_routing_number", "body", m.BankRoutingNumber); err != nil {
		return err
	}

	return nil
}

func (m *StrongholdPaymentMethodDetails) validateInitiatorIP(formats strfmt.Registry) error {

	if err := validate.Required("initiator_ip", "body", m.InitiatorIP); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StrongholdPaymentMethodDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StrongholdPaymentMethodDetails) UnmarshalBinary(b []byte) error {
	var res StrongholdPaymentMethodDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
