// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FItoFITransaction transaction
//
// Transaction
// swagger:model FItoFITransaction
type FItoFITransaction struct {

	// The transaction receipt.
	// Required: true
	TransactionReceipt []*TransactionReceipt `json:"transaction_receipt"`

	// transaction details
	// Required: true
	TransactionDetails *TransactionDetails `json:"transaction_details"`
}

// Validate validates this f ito f i transaction
func (m *FItoFITransaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactionReceipt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FItoFITransaction) validateTransactionReceipt(formats strfmt.Registry) error {

	if err := validate.Required("transaction_receipt", "body", m.TransactionReceipt); err != nil {
		return err
	}

	for i := 0; i < len(m.TransactionReceipt); i++ {
		if swag.IsZero(m.TransactionReceipt[i]) { // not required
			continue
		}

		if m.TransactionReceipt[i] != nil {
			if err := m.TransactionReceipt[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transaction_receipt" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FItoFITransaction) validateTransactionDetails(formats strfmt.Registry) error {

	if err := validate.Required("transaction_details", "body", m.TransactionDetails); err != nil {
		return err
	}

	if m.TransactionDetails != nil {
		if err := m.TransactionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transaction_details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FItoFITransaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FItoFITransaction) UnmarshalBinary(b []byte) error {
	var res FItoFITransaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
