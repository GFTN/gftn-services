// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteStatus quoteStatus
//
// Quote Status
// swagger:model QuoteStatus
type QuoteStatus struct {

	// quote id for this quote as set by the quote giver
	// Required: true
	QuoteID *string `json:"quote_id"`

	// quote response
	QuoteResponse *Quote `json:"quote_response,omitempty"`

	// request id for this quote as set by the quote service
	RequestID string `json:"request_id,omitempty"`

	// The ID that identifies the RFI Participant on the WorldWire network (i.e. uk.yourbankintheUK.payments.ibm.com).
	//
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	RfiID *string `json:"rfi_id"`

	// quote status of a quote request [1 = pending, 2 = updated,3 = executing 4 = executed, 98 = failed, 99 = cancelled]
	// Required: true
	Status *float64 `json:"status"`

	// Time when RFI response to the quote.
	TimeQuote int64 `json:"time_quote,omitempty"`

	// Request time for this quote request.
	TimeRequest int64 `json:"time_request,omitempty"`
}

// Validate validates this quote status
func (m *QuoteStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuoteID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteStatus) validateQuoteID(formats strfmt.Registry) error {

	if err := validate.Required("quote_id", "body", m.QuoteID); err != nil {
		return err
	}

	return nil
}

func (m *QuoteStatus) validateQuoteResponse(formats strfmt.Registry) error {

	if swag.IsZero(m.QuoteResponse) { // not required
		return nil
	}

	if m.QuoteResponse != nil {
		if err := m.QuoteResponse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote_response")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteStatus) validateRfiID(formats strfmt.Registry) error {

	if err := validate.Required("rfi_id", "body", m.RfiID); err != nil {
		return err
	}

	if err := validate.MinLength("rfi_id", "body", string(*m.RfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("rfi_id", "body", string(*m.RfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("rfi_id", "body", string(*m.RfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *QuoteStatus) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteStatus) UnmarshalBinary(b []byte) error {
	var res QuoteStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
