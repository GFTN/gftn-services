// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentLogRecord paymentLogRecord
//
// FI to FI CCT payment log record for reporting
// swagger:model PaymentLogRecord
type PaymentLogRecord struct {

	// the client end-to-end-id for this payment
	// Required: true
	EndToEndID *string `json:"end-to-end-id"`

	// fitoficct memo data
	FitoficctMemoData *PaymentLogRecordFitoficctMemoData `json:"fitoficct_memo_data,omitempty"`

	// the status of this payment
	// Required: true
	PaymentStatus *string `json:"payment_status"`

	// timestamp of the status change according to World Wire
	// Required: true
	TimeStamp *int64 `json:"time_stamp"`
}

// Validate validates this payment log record
func (m *PaymentLogRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndToEndID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFitoficctMemoData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentLogRecord) validateEndToEndID(formats strfmt.Registry) error {

	if err := validate.Required("end-to-end-id", "body", m.EndToEndID); err != nil {
		return err
	}

	return nil
}

func (m *PaymentLogRecord) validateFitoficctMemoData(formats strfmt.Registry) error {

	if swag.IsZero(m.FitoficctMemoData) { // not required
		return nil
	}

	if m.FitoficctMemoData != nil {
		if err := m.FitoficctMemoData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fitoficct_memo_data")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentLogRecord) validatePaymentStatus(formats strfmt.Registry) error {

	if err := validate.Required("payment_status", "body", m.PaymentStatus); err != nil {
		return err
	}

	return nil
}

func (m *PaymentLogRecord) validateTimeStamp(formats strfmt.Registry) error {

	if err := validate.Required("time_stamp", "body", m.TimeStamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentLogRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentLogRecord) UnmarshalBinary(b []byte) error {
	var res PaymentLogRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
