// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/shopspring/decimal"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeReceipt exchangeReceipt
//
// Exchange Receipt
// swagger:model ExchangeReceipt
type ExchangeReceipt struct {

	// exchange
	// Required: true
	Exchange *Exchange `json:"exchange"`

	// Options are "OK" or "Denied".
	// Required: true
	// Enum: [OK Denied]
	StatusExchange *string `json:"status_exchange"`

	// Timestamp when the exchange occured.
	TimeExecuted int64 `json:"time_executed,omitempty"`

	// Transacted amount of source asset.
	// Required: true
	TransactedAmountSource *decimal.Decimal `json:"transacted_amount_source"`

	// Transacted amount of target asset.
	// Required: true
	TransactedAmountTarget *decimal.Decimal `json:"transacted_amount_target"`

	// Transacted hash.
	// Required: true
	TransactionHash *string `json:"transaction_hash"`
}

// Validate validates this exchange receipt
func (m *ExchangeReceipt) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusExchange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactedAmountSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactedAmountTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeReceipt) validateExchange(formats strfmt.Registry) error {

	if err := validate.Required("exchange", "body", m.Exchange); err != nil {
		return err
	}

	if m.Exchange != nil {
		if err := m.Exchange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchange")
			}
			return err
		}
	}

	return nil
}

var exchangeReceiptTypeStatusExchangePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","Denied"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exchangeReceiptTypeStatusExchangePropEnum = append(exchangeReceiptTypeStatusExchangePropEnum, v)
	}
}

const (

	// ExchangeReceiptStatusExchangeOK captures enum value "OK"
	ExchangeReceiptStatusExchangeOK string = "OK"

	// ExchangeReceiptStatusExchangeDenied captures enum value "Denied"
	ExchangeReceiptStatusExchangeDenied string = "Denied"
)

// prop value enum
func (m *ExchangeReceipt) validateStatusExchangeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, exchangeReceiptTypeStatusExchangePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ExchangeReceipt) validateStatusExchange(formats strfmt.Registry) error {

	if err := validate.Required("status_exchange", "body", m.StatusExchange); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusExchangeEnum("status_exchange", "body", *m.StatusExchange); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeReceipt) validateTransactedAmountSource(formats strfmt.Registry) error {

	if err := validate.Required("transacted_amount_source", "body", m.TransactedAmountSource); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeReceipt) validateTransactedAmountTarget(formats strfmt.Registry) error {

	if err := validate.Required("transacted_amount_target", "body", m.TransactedAmountTarget); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeReceipt) validateTransactionHash(formats strfmt.Registry) error {

	if err := validate.Required("transaction_hash", "body", m.TransactionHash); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeReceipt) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeReceipt) UnmarshalBinary(b []byte) error {
	var res ExchangeReceipt
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
