// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteFilter quoteFilter
//
// A set of options you can supply to filter the results of quotes you receive from the /quotes endpoint.
//
// swagger:model QuoteFilter
type QuoteFilter struct {

	// This one's special, so be careful! If you set this to true, it will override all other filters and delete all your quotes. Only used for delete quotes
	DeleteAllQuotes *bool `json:"delete_all_quotes,omitempty"`

	// exchange rate
	ExchangeRate *Comparison `json:"exchange_rate,omitempty"`

	// Filter by requestor Participant's identifier.
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	OfiID *string `json:"ofi_id,omitempty"`

	// Filter by Participant's identifier that provided the quote.
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	RfiID *string `json:"rfi_id,omitempty"`

	// source asset
	SourceAsset *Asset `json:"source_asset,omitempty"`

	// status
	Status *Comparison `json:"status,omitempty"`

	// target asset
	TargetAsset *Asset `json:"target_asset,omitempty"`

	// time expire rfi
	TimeExpireRfi *Comparison `json:"time_expire_rfi,omitempty"`
}

// Validate validates this quote filter
func (m *QuoteFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExchangeRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeExpireRfi(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteFilter) validateExchangeRate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExchangeRate) { // not required
		return nil
	}

	if m.ExchangeRate != nil {
		if err := m.ExchangeRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchange_rate")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteFilter) validateOfiID(formats strfmt.Registry) error {

	if swag.IsZero(m.OfiID) { // not required
		return nil
	}

	if err := validate.MinLength("ofi_id", "body", string(*m.OfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ofi_id", "body", string(*m.OfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("ofi_id", "body", string(*m.OfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *QuoteFilter) validateRfiID(formats strfmt.Registry) error {

	if swag.IsZero(m.RfiID) { // not required
		return nil
	}

	if err := validate.MinLength("rfi_id", "body", string(*m.RfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("rfi_id", "body", string(*m.RfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("rfi_id", "body", string(*m.RfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *QuoteFilter) validateSourceAsset(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceAsset) { // not required
		return nil
	}

	if m.SourceAsset != nil {
		if err := m.SourceAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_asset")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteFilter) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteFilter) validateTargetAsset(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetAsset) { // not required
		return nil
	}

	if m.TargetAsset != nil {
		if err := m.TargetAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_asset")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteFilter) validateTimeExpireRfi(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeExpireRfi) { // not required
		return nil
	}

	if m.TimeExpireRfi != nil {
		if err := m.TimeExpireRfi.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_expire_rfi")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteFilter) UnmarshalBinary(b []byte) error {
	var res QuoteFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
