// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeesRequest feesRequest
//
// The information required to determine the fees related to a payment a Participant would like to execute.
//
// swagger:model FeesRequest
type FeesRequest struct {

	// Amount the OFI sends to the RFI on the ledger (not inclusive of RFI Fees). The recipient will receive this amount minus the RFI fees. If this attribute is set, amount_payout should not be filled in.
	//
	// Multiple Of: 1e-07
	AmountGross float64 `json:"amount_gross,omitempty"`

	// Amount (in payout asset) the sender would like the recipient to receive from the RFI. This is different from the amount_gross parameter since the sender will need to confirm that they are willing to pay the RFI's fee to make the payment to the recipient. If this attribute is set, amount_gross should not be set.
	//
	// Multiple Of: 1e-07
	AmountPayout float64 `json:"amount_payout,omitempty"`

	// Amount (in settlement asset) the OFI gives to the RFI on the ledger (inclusive of RFI Fees).
	//
	// Multiple Of: 1e-07
	AmountSettlement float64 `json:"amount_settlement,omitempty"`

	// The three-letter asset code of the fiat payment which will be made by the Participant to their ultimate beneficiary.
	//
	// Required: true
	AssetPayout *string `json:"asset_payout"`

	// asset settlement
	// Required: true
	AssetSettlement *Asset `json:"asset_settlement"`

	// details payout location
	DetailsPayoutLocation *PayoutLocation `json:"details_payout_location,omitempty"`

	// Identifier of the Participant who initiated the fee request.
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	ParticipantID *string `json:"participant_id"`

	// Unique identifier for this fee request.
	// Required: true
	RequestID *string `json:"request_id"`
}

// Validate validates this fees request
func (m *FeesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmountGross(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountPayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmountSettlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetPayout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetSettlement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetailsPayoutLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesRequest) validateAmountGross(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountGross) { // not required
		return nil
	}

	if err := validate.MultipleOf("amount_gross", "body", float64(m.AmountGross), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *FeesRequest) validateAmountPayout(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountPayout) { // not required
		return nil
	}

	if err := validate.MultipleOf("amount_payout", "body", float64(m.AmountPayout), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *FeesRequest) validateAmountSettlement(formats strfmt.Registry) error {

	if swag.IsZero(m.AmountSettlement) { // not required
		return nil
	}

	if err := validate.MultipleOf("amount_settlement", "body", float64(m.AmountSettlement), 1e-07); err != nil {
		return err
	}

	return nil
}

func (m *FeesRequest) validateAssetPayout(formats strfmt.Registry) error {

	if err := validate.Required("asset_payout", "body", m.AssetPayout); err != nil {
		return err
	}

	return nil
}

func (m *FeesRequest) validateAssetSettlement(formats strfmt.Registry) error {

	if err := validate.Required("asset_settlement", "body", m.AssetSettlement); err != nil {
		return err
	}

	if m.AssetSettlement != nil {
		if err := m.AssetSettlement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asset_settlement")
			}
			return err
		}
	}

	return nil
}

func (m *FeesRequest) validateDetailsPayoutLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.DetailsPayoutLocation) { // not required
		return nil
	}

	if m.DetailsPayoutLocation != nil {
		if err := m.DetailsPayoutLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("details_payout_location")
			}
			return err
		}
	}

	return nil
}

func (m *FeesRequest) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participant_id", "body", m.ParticipantID); err != nil {
		return err
	}

	if err := validate.MinLength("participant_id", "body", string(*m.ParticipantID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("participant_id", "body", string(*m.ParticipantID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("participant_id", "body", string(*m.ParticipantID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *FeesRequest) validateRequestID(formats strfmt.Registry) error {

	if err := validate.Required("request_id", "body", m.RequestID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeesRequest) UnmarshalBinary(b []byte) error {
	var res FeesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
