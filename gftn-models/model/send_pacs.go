// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendPacs sendPacs
//
// Send Pacs format
// swagger:model SendPacs
type SendPacs struct {

	// This will be the encoded base 64 format xml message. Sending a transaction request will need to encode a pacs.008 xml message. Reacting on a received transaction request will need to encode an ibwf.001 xml message.
	// Required: true
	Message *string `json:"message"`

	// This will be the type of the xml message. There are three types of message. First, pacs.008 for sending a transaction request. Second, ibwf.001 for reacting on a received transaction request. Finally, any response from the service will be a pacs.002 message.
	// Required: true
	MessageType *string `json:"message_type"`
}

// Validate validates this send pacs
func (m *SendPacs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendPacs) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *SendPacs) validateMessageType(formats strfmt.Registry) error {

	if err := validate.Required("message_type", "body", m.MessageType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendPacs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendPacs) UnmarshalBinary(b []byte) error {
	var res SendPacs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
