// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PayoutLocation payoutLocation
//
// Details of each payout location. Based on https://schema.org/LocalBusiness
// swagger:model PayoutLocation
type PayoutLocation struct {

	// address
	Address *Address `json:"address,omitempty"`

	// category
	// Required: true
	Category *PayoutLocationCategory `json:"category"`

	// The currency accepted.
	// Required: true
	CurrenciesAccepted []string `json:"currencies_accepted" bson:"currencies_accepted"`

	// geo
	// Required: true
	Geo *Geo `json:"geo"`

	// The unique identifier of the location.
	ID string `json:"id,omitempty"`

	// An image of the item. This can be a URL or a fully described ImageObject.
	// Required: true
	Image *string `json:"image"`

	// The financial institute that this location belongs to.
	// Required: true
	MemberOf []string `json:"member_of" bson:"member_of"`

	// The name of the location.
	// Required: true
	Name *string `json:"name"`

	// The opening hours of the location.
	// Required: true
	OpeningHours []*PayoutLocationOpeningHour `json:"opening_hours" bson:"opening_hours"`

	// The collection of identifiers for locations which belong to the location - these can include areas, and points.
	//
	// Required: true
	PayoutChild []string `json:"payout_child" bson:"payout_child"`

	// The collection of identifiers for the parents of the locations - it can be only areas.
	//
	// Required: true
	PayoutParent []string `json:"payout_parent" bson:"payout_parent"`

	// Optional routing information, also known as BIC (bank id code).
	RoutingNumber string `json:"routing_number,omitempty" bson:"routing_number"`

	// The phone number of the location.
	// Required: true
	Telephone *string `json:"telephone"`

	// The type of location. Options include: "Bank", "Non-Bank Financial Institution", "Mobile Network Operator", or "Other".
	//
	// Required: true
	// Enum: [Bank Non-Bank Financial Institution Mobile Network Operator Other]
	Type *string `json:"type"`

	// The URL of the location.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this payout location
func (m *PayoutLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrenciesAccepted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpeningHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoutChild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayoutParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelephone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PayoutLocation) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *PayoutLocation) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	if m.Category != nil {
		if err := m.Category.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("category")
			}
			return err
		}
	}

	return nil
}

func (m *PayoutLocation) validateCurrenciesAccepted(formats strfmt.Registry) error {

	if err := validate.Required("currencies_accepted", "body", m.CurrenciesAccepted); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validateGeo(formats strfmt.Registry) error {

	if err := validate.Required("geo", "body", m.Geo); err != nil {
		return err
	}

	if m.Geo != nil {
		if err := m.Geo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geo")
			}
			return err
		}
	}

	return nil
}

func (m *PayoutLocation) validateImage(formats strfmt.Registry) error {

	if err := validate.Required("image", "body", m.Image); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validateMemberOf(formats strfmt.Registry) error {

	if err := validate.Required("member_of", "body", m.MemberOf); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validateOpeningHours(formats strfmt.Registry) error {

	if err := validate.Required("opening_hours", "body", m.OpeningHours); err != nil {
		return err
	}

	for i := 0; i < len(m.OpeningHours); i++ {
		if swag.IsZero(m.OpeningHours[i]) { // not required
			continue
		}

		if m.OpeningHours[i] != nil {
			if err := m.OpeningHours[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("opening_hours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PayoutLocation) validatePayoutChild(formats strfmt.Registry) error {

	if err := validate.Required("payout_child", "body", m.PayoutChild); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validatePayoutParent(formats strfmt.Registry) error {

	if err := validate.Required("payout_parent", "body", m.PayoutParent); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validateTelephone(formats strfmt.Registry) error {

	if err := validate.Required("telephone", "body", m.Telephone); err != nil {
		return err
	}

	return nil
}

var payoutLocationTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bank","Non-Bank Financial Institution","Mobile Network Operator","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		payoutLocationTypeTypePropEnum = append(payoutLocationTypeTypePropEnum, v)
	}
}

const (

	// PayoutLocationTypeBank captures enum value "Bank"
	PayoutLocationTypeBank string = "Bank"

	// PayoutLocationTypeNonBankFinancialInstitution captures enum value "Non-Bank Financial Institution"
	PayoutLocationTypeNonBankFinancialInstitution string = "Non-Bank Financial Institution"

	// PayoutLocationTypeMobileNetworkOperator captures enum value "Mobile Network Operator"
	PayoutLocationTypeMobileNetworkOperator string = "Mobile Network Operator"

	// PayoutLocationTypeOther captures enum value "Other"
	PayoutLocationTypeOther string = "Other"
)

// prop value enum
func (m *PayoutLocation) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, payoutLocationTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PayoutLocation) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PayoutLocation) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PayoutLocation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PayoutLocation) UnmarshalBinary(b []byte) error {
	var res PayoutLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
