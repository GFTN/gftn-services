// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trust trust
//
// Trust
// swagger:model Trust
type Trust struct {

	// This is account name that is trusting of the asset. Options include "default", "issuing", or another string that identifies another operating account.
	//
	// Required: true
	AccountName *string `json:"account_name"`

	// The 3-letter code identifying the asset being trusted. For a list of assets retrieve all World Wire assets from the [/assets](??base_url??/docs/??version??/api/participant-client-api?jump=path_get__assets) endpoint.
	//
	// Required: true
	AssetCode *string `json:"asset_code"`

	// Generated by requester, a unique ID for this entire trust flow
	EndToEndID string `json:"end_to_end_id,omitempty"`

	// The trust limit for this asset between source and issuer. This parameter is only necessary when the trust permission you are submitting is "request".
	//
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// When the permission submitted by an OFI is "request", this is the identifier of the RFI who issued the asset. However, when the permission submitted by an RFI is "allow", this is the OFI's identifier (i.e., uk.yourbankintheUK.payments.ibm.com). Make sure you request trust first to the RFI's issuing account, and then also their operating account.
	//
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	ParticipantID *string `json:"participant_id"`

	// This string identifier represents the level of trust you would like to set with another participant in your trust object. Options are "request", "allow", or "revoke".
	//
	// Required: true
	Permission *string `json:"permission"`
}

// Validate validates this trust
func (m *Trust) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trust) validateAccountName(formats strfmt.Registry) error {

	if err := validate.Required("account_name", "body", m.AccountName); err != nil {
		return err
	}

	return nil
}

func (m *Trust) validateAssetCode(formats strfmt.Registry) error {

	if err := validate.Required("asset_code", "body", m.AssetCode); err != nil {
		return err
	}

	return nil
}

func (m *Trust) validateLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("limit", "body", int64(m.Limit), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Trust) validateParticipantID(formats strfmt.Registry) error {

	if err := validate.Required("participant_id", "body", m.ParticipantID); err != nil {
		return err
	}

	if err := validate.MinLength("participant_id", "body", string(*m.ParticipantID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("participant_id", "body", string(*m.ParticipantID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("participant_id", "body", string(*m.ParticipantID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *Trust) validatePermission(formats strfmt.Registry) error {

	if err := validate.Required("permission", "body", m.Permission); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trust) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trust) UnmarshalBinary(b []byte) error {
	var res Trust
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
