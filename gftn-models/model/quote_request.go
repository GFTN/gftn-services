// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/shopspring/decimal"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuoteRequest quoteRequest
//
// Quote Request
// swagger:model QuoteRequest
type QuoteRequest struct {

	// Maximum units for which this quote is valid
	// Required: true
	LimitMax *decimal.Decimal `json:"limit_max"`

	// Minimum units for which this quote is valid
	LimitMin *decimal.Decimal `json:"limit_min,omitempty"`

	// The ID that identifies the OFI Participant on the WorldWire network (i.e. uk.yourbankintheUK.payments.ibm.com).
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	OfiID *string `json:"ofi_id"`

	// source asset
	SourceAsset *Asset `json:"source_asset,omitempty"`

	// target asset
	TargetAsset *Asset `json:"target_asset,omitempty"`

	// End-time for this quote request to be valid
	// Required: true
	TimeExpire *int64 `json:"time_expire"`
}

// Validate validates this quote request
func (m *QuoteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimitMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAsset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeExpire(formats); err != nil {
		res = append(res, err)
	}
	if err := m.validateTimeExpire(formats); err != nil {
		res = append(res, err)
	}
	if err := m.sanityCheck(); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// sanity check for contraints
func (m *QuoteRequest) sanityCheck() error {
	if m.LimitMax != nil && m.LimitMin != nil {
		if m.LimitMax.LessThan(*m.LimitMin) {
			msg := "limit_max < limit_min"
			return errors.New(1, msg)
		}
	}
	if m.TimeExpire != nil {
		if *m.TimeExpire < time.Now().Unix() {
			msg := "time_expire < time_now"
			return errors.New(2, msg)
		}
	}
	return nil
}

func (m *QuoteRequest) validateLimitMax(formats strfmt.Registry) error {

	if err := validate.Required("limit_max", "body", m.LimitMax); err != nil {
		return err
	}

	return nil
}

func (m *QuoteRequest) validateOfiID(formats strfmt.Registry) error {

	if err := validate.Required("ofi_id", "body", m.OfiID); err != nil {
		return err
	}

	if err := validate.MinLength("ofi_id", "body", string(*m.OfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ofi_id", "body", string(*m.OfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("ofi_id", "body", string(*m.OfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *QuoteRequest) validateSourceAsset(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceAsset) { // not required
		return nil
	}

	if m.SourceAsset != nil {
		if err := m.SourceAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_asset")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteRequest) validateTargetAsset(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetAsset) { // not required
		return nil
	}

	if m.TargetAsset != nil {
		if err := m.TargetAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_asset")
			}
			return err
		}
	}

	return nil
}

func (m *QuoteRequest) validateTimeExpire(formats strfmt.Registry) error {

	if err := validate.Required("time_expire", "body", m.TimeExpire); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteRequest) UnmarshalBinary(b []byte) error {
	var res QuoteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
