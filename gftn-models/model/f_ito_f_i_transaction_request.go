// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FItoFITransactionRequest fitoFITransactionRequest
//
// Transaction GET request parameters
// swagger:model FItoFITransactionRequest
type FItoFITransactionRequest struct {

	// End Date of the range in which transactions are being quried.
	// Format: date
	EndDate strfmt.Date `json:"end_date,omitempty"`

	// A name to identify from which OFI the request is coming from
	// Required: true
	// Max Length: 32
	// Min Length: 5
	// Pattern: ^[a-zA-Z0-9-]{5,32}$
	OfiID *string `json:"ofi_id"`

	// Page number for pagination.
	PageNumber int64 `json:"page_number,omitempty"`

	// A name to identify the transaction
	QueryData string `json:"query_data,omitempty"`

	// A type to identify what kind of data is passed
	// Required: true
	QueryType *string `json:"query_type"`

	// Start Date of the range in which transactions are being quried.
	// Format: date
	StartDate strfmt.Date `json:"start_date,omitempty"`

	// Number of transactions for each page
	TransactionBatch int64 `json:"transaction_batch,omitempty"`
}

// Validate validates this f ito f i transaction request
func (m *FItoFITransactionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfiID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FItoFITransactionRequest) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("end_date", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FItoFITransactionRequest) validateOfiID(formats strfmt.Registry) error {

	if err := validate.Required("ofi_id", "body", m.OfiID); err != nil {
		return err
	}

	if err := validate.MinLength("ofi_id", "body", string(*m.OfiID), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ofi_id", "body", string(*m.OfiID), 32); err != nil {
		return err
	}

	if err := validate.Pattern("ofi_id", "body", string(*m.OfiID), `^[a-zA-Z0-9-]{5,32}$`); err != nil {
		return err
	}

	return nil
}

func (m *FItoFITransactionRequest) validateQueryType(formats strfmt.Registry) error {

	if err := validate.Required("query_type", "body", m.QueryType); err != nil {
		return err
	}

	return nil
}

func (m *FItoFITransactionRequest) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("start_date", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FItoFITransactionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FItoFITransactionRequest) UnmarshalBinary(b []byte) error {
	var res FItoFITransactionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
