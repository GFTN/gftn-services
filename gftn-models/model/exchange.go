// Â© Copyright IBM Corporation 2020. All rights reserved.
// SPDX-License-Identifier: Apache2.0
// 
// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"time"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/shopspring/decimal"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Exchange exchange
//
// Exchange
// swagger:model Exchange
type Exchange struct {

	// OFI Participant operating or issuing account for receiving target asset.
	//
	// Required: true
	AccountNameReceive *string `json:"account_name_receive"`

	// OFI Participant operating or issuing account for source asset transmit.
	//
	// Required: true
	AccountNameSend *string `json:"account_name_send"`

	// Amount of source asset to be exchanged.
	// Required: true
	Amount *decimal.Decimal `json:"amount"`

	// quote
	// Required: true
	Quote *Quote `json:"quote"`
}

// Validate validates this exchange
func (m *Exchange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNameReceive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountNameSend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.sanityCheck(); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

//sanity Check for constraints
func (m *Exchange) sanityCheck() error {
	if m.Amount != nil && m.Quote.LimitMin != nil {
		if m.Amount.LessThan(*m.Quote.LimitMin) {
			msg := "amount < limit_min"
			return errors.New(1, msg)
		}
	}
	if m.Amount != nil && m.Quote.LimitMax != nil {
		if m.Quote.LimitMax.LessThan(*m.Amount) {
			msg := "amount > limit_max"
			return errors.New(2, msg)
		}
	}
	if m.Quote.TimeExpire != nil {
		if *m.Quote.TimeExpire < time.Now().Unix() {
			msg := "time_expire < time_now"
			return errors.New(3, msg)
		}
	}
	return nil
}

func (m *Exchange) validateAccountNameReceive(formats strfmt.Registry) error {

	if err := validate.Required("account_name_receive", "body", m.AccountNameReceive); err != nil {
		return err
	}

	return nil
}

func (m *Exchange) validateAccountNameSend(formats strfmt.Registry) error {

	if err := validate.Required("account_name_send", "body", m.AccountNameSend); err != nil {
		return err
	}

	return nil
}

func (m *Exchange) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Exchange) validateQuote(formats strfmt.Registry) error {

	if err := validate.Required("quote", "body", m.Quote); err != nil {
		return err
	}

	if m.Quote != nil {
		if err := m.Quote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Exchange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Exchange) UnmarshalBinary(b []byte) error {
	var res Exchange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
